require('dotenv').config();
const { Telegraf } = require('telegraf');
const { Pool } = require('pg');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
(async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS products (
      id SERIAL PRIMARY KEY,
      name TEXT NOT NULL,
      price TEXT NOT NULL,
      photo TEXT,
      link TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
})();

// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
bot.start(async (ctx) => {
  const products = await pool.query('SELECT * FROM products ORDER BY id DESC LIMIT 5');
  if (products.rows.length === 0) {
    return ctx.reply('–ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!');
  }

  for (const p of products.rows) {
    await ctx.replyWithPhoto(p.photo || 'https://via.placeholder.com/300', {
      caption: `${p.name}\n–¶–µ–Ω–∞: ${p.price}`,
      reply_markup: {
        inline_keyboard: [[{ text: 'üõí –ö—É–ø–∏—Ç—å', callback_data: `buy_${p.id}` }]]
      }
    });
  }
});

// –ü–æ–∫—É–ø–∫–∞
bot.action(/buy_(\d+)/, async (ctx) => {
  const productId = ctx.match[1];
  const product = await pool.query('SELECT * FROM products WHERE id=$1', [productId]);

  if (product.rows.length > 0) {
    const p = product.rows[0];
    await bot.telegram.sendMessage(
      process.env.ADMIN_ID,
      `üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–¢–æ–≤–∞—Ä: ${p.name}\n–û—Ç: @${ctx.from.username || ctx.from.id}`
    );
    ctx.reply('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –∞–¥–º–∏–Ω–∞
bot.command('add', async (ctx) => {
  if (ctx.from.id.toString() !== process.env.ADMIN_ID) return;
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–ø–∏—Å—å—é: –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');
});

// –ü—Ä–∏–µ–º —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞
bot.on('photo', async (ctx) => {
  if (ctx.from.id.toString() !== process.env.ADMIN_ID) return;

  const caption = ctx.message.caption;
  if (!caption) return ctx.reply('–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å: –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)');

  const [name, price, link] = caption.split('|').map(s => s.trim());
  const fileId = ctx.message.photo.pop().file_id;
  const file = await ctx.telegram.getFileLink(fileId);

  await pool.query(
    'INSERT INTO products (name, price, link, photo) VALUES ($1, $2, $3, $4)',
    [name, price, link || null, file.href]
  );

  ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω!`);
});

// --- –í–ê–ñ–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ POLLING ---
bot.launch();
console.log('ü§ñ Bot started via polling');
