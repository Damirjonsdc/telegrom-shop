const { Telegraf, Markup } = require('telegraf');
const db = require('./db');

const BOT_TOKEN = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD; // —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å
const bot = new Telegraf(BOT_TOKEN);

// –°–µ—Å—Å–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ (—á—Ç–æ–±—ã –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä)
let adminSessions = {};

// –ü–æ–º–æ—â–Ω–∏–∫–∏
function getUser(id) {
  return db.prepare('SELECT * FROM users WHERE telegram_id=?').get(id);
}

function addUser(id, name, phone) {
  db.prepare('INSERT OR IGNORE INTO users (telegram_id,name,phone) VALUES (?,?,?)')
    .run(id, name, phone);
}

function addProduct(category, name, price, photo, size, link) {
  db.prepare('INSERT INTO products (category,name,price,photo,size,link) VALUES (?,?,?,?,?,?)')
    .run(category, name, price, photo, size, link);
}

function getProducts(category) {
  return db.prepare('SELECT * FROM products WHERE category=?').all(category);
}

function deleteProduct(id) {
  db.prepare('DELETE FROM products WHERE id=?').run(id);
}

// –°—Ç–∞—Ä—Ç
bot.start((ctx) => {
  const user = getUser(ctx.from.id);
  if (!user) {
    ctx.session = { step: 'name' };
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
  } else {
    showMenu(ctx, user);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
bot.on('text', (ctx) => {
  const user = getUser(ctx.from.id);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  if (ctx.session && ctx.session.step === 'name') {
    ctx.session.name = ctx.message.text;
    ctx.session.step = 'phone';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
    return;
  }
  if (ctx.session && ctx.session.step === 'phone') {
    addUser(ctx.from.id, ctx.session.name, ctx.message.text);
    ctx.session = null;
    ctx.reply('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    showMenu(ctx, getUser(ctx.from.id));
    return;
  }

  // –õ–æ–≥–∏–Ω –≤ –∞–¥–º–∏–Ω–∫—É
  if (ctx.session && ctx.session.step === 'admin_login') {
    if (ctx.message.text === ADMIN_PASSWORD) {
      db.prepare('UPDATE users SET is_admin=1 WHERE telegram_id=?').run(ctx.from.id);
      ctx.session = null;
      ctx.reply('‚úÖ –î–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!');
      showMenu(ctx, getUser(ctx.from.id));
    } else {
      ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    }
    return;
  }

  // –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä
  const adminSession = adminSessions[ctx.from.id];
  if (adminSession) {
    if (adminSession.step === 'name') {
      adminSession.name = ctx.message.text;
      adminSession.step = 'price';
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:');
    } else if (adminSession.step === 'price') {
      adminSession.price = parseFloat(ctx.message.text);
      adminSession.step = 'size';
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
    } else if (adminSession.step === 'size') {
      adminSession.size = ctx.message.text;
      adminSession.step = 'link';
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:');
    } else if (adminSession.step === 'link') {
      adminSession.link = ctx.message.text;
      addProduct(adminSession.category, adminSession.name, adminSession.price, adminSession.photo, adminSession.size, adminSession.link);
      delete adminSessions[ctx.from.id];
      ctx.reply('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
bot.command('admin', (ctx) => {
  ctx.session = { step: 'admin_login' };
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMenu(ctx, user) {
  if (user.is_admin) {
    ctx.reply('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', Markup.keyboard([
      ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä','üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤'],
      ['üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä','üõí –ó–∞–∫–∞–∑—ã']
    ]).resize());
  } else {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.keyboard([
      ['üëü –ú—É–∂—á–∏–Ω—ã','üë† –ñ–µ–Ω—â–∏–Ω—ã'],
      ['üß¢ –î–µ—Ç–∏','üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã']
    ]).resize());
  }
}

// –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
bot.on('photo', (ctx) => {
  const user = getUser(ctx.from.id);
  if (!user || !user.is_admin) return;

  const fileId = ctx.message.photo.pop().file_id;

  adminSessions[ctx.from.id] = { step: 'name', photo: fileId, category: '–ú—É–∂—á–∏–Ω—ã' }; 
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
});

// –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏–º–µ—Ä)
bot.action(/buy_.+/, (ctx) => {
  const productId = ctx.callbackQuery.data.replace('buy_', '');
  const user = getUser(ctx.from.id);

  db.prepare('INSERT INTO orders (user_id, product_id) VALUES (?, ?)').run(user.id, productId);
  ctx.reply('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!');
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
